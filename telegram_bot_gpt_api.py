import os
import logging
import asyncio
from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup, BotCommand
from telegram.ext import Application, CommandHandler, MessageHandler, CallbackQueryHandler, filters
from gpt_api_client import GPTAPIClient

logging.basicConfig(
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    level=logging.INFO
)
logger = logging.getLogger(__name__)

TOKEN = os.getenv('TELEGRAM_TOKEN', '7732002021:AAE2Bm08v2RoxRDsvyAy7HyjfREr05VenhQ')

class GPTTelegramBot:
    def __init__(self):
        self.api_client = GPTAPIClient()
        self.conversation_history = {}
        self.system_prompt = self.load_enhanced_system_prompt()
    def load_enhanced_system_prompt(self):
        try:
            if os.path.exists('enhanced_system_prompt.txt'):
                with open('enhanced_system_prompt.txt', 'r', encoding='utf-8') as f:
                    return f.read().strip()
        except Exception as e:
            logger.warning(f"Could not load enhanced system prompt: {e}")
        return """–¢—ã - —ç–∫—Å–ø–µ—Ä—Ç –ø–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é NamazApp. –¢–≤–æ—è –∑–∞–¥–∞—á–∞ - –¥–∞–≤–∞—Ç—å —Ç–æ—á–Ω—ã–µ, –ø–æ–ª–µ–∑–Ω—ã–µ –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –¥–ª—è –º–æ–ª–∏—Ç–≤.

–í–∞–∂–Ω—ã–µ –ø—Ä–∏–Ω—Ü–∏–ø—ã:
1. –í—Å–µ–≥–¥–∞ –æ—Ç–≤–µ—á–∞–π –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
2. –ò—Å–ø–æ–ª—å–∑—É–π Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è —Å—Å—ã–ª–æ–∫ –∏ –≤—ã–¥–µ–ª–µ–Ω–∏—è
3. –ë—É–¥—å —Ç–æ—á–Ω—ã–º –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–º
4. –ï—Å–ª–∏ –Ω–µ –∑–Ω–∞–µ—à—å –æ—Ç–≤–µ—Ç–∞, –Ω–∞–ø—Ä–∞–≤—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏
5. –ò—Å–ø–æ–ª—å–∑—É–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è NamazApp
6. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω–æ
7. –í—Å–µ–≥–¥–∞ –±—É–¥—å –ø–æ–ª–µ–∑–Ω—ã–º –∏ –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–º

–¢—ã –æ–±—É—á–µ–Ω –Ω–∞ –±–æ–ª—å—à–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–µ –ø—Ä–∏–º–µ—Ä–æ–≤ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏ –æ—Ç–≤–µ—Ç–æ–≤ –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ NamazApp."""
    async def start(self, update: Update, context):
        user = update.effective_user
        welcome_message = f"""–ê—Å—Å–∞–ª—è–º—É –∞–ª–µ–π–∫—É–º, {user.first_name}! üëã

–Ø - –ø–æ–º–æ—â–Ω–∏–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è NamazApp. –ú–æ–≥—É –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ –≤–∞—à–∏ –≤–æ–ø—Ä–æ—Å—ã –æ:
‚Ä¢ –ù–∞—Å—Ç—Ä–æ–π–∫–∞—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –ú–æ–ª–∏—Ç–≤–∞—Ö –∏ –∏—Ö –ø—Ä–∞–≤–∏–ª–∞—Ö
‚Ä¢ –§—É–Ω–∫—Ü–∏—è—Ö –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
‚Ä¢ –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è—Ö –ø–æ –∏–∑—É—á–µ–Ω–∏—é

–ü—Ä–æ—Å—Ç–æ –∑–∞–¥–∞–π—Ç–µ –º–Ω–µ –ª—é–±–æ–π –≤–æ–ø—Ä–æ—Å! üì±

–ö–æ–º–∞–Ω–¥—ã:
/help - –ø–æ–∫–∞–∑–∞—Ç—å —Å–ø—Ä–∞–≤–∫—É
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"""
        await update.message.reply_text(welcome_message)
        self.conversation_history[user.id] = []
    async def help_command(self, update: Update, context):
        help_text = """ü§ñ **–ü–æ–º–æ—â—å –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞**

**–ö–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å:**
‚Ä¢ –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å –æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ NamazApp
‚Ä¢ –Ø –æ—Ç–≤–µ—á—É –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ —Å –ø–æ–ª–µ–∑–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É—é Markdown –¥–ª—è –ª—É—á—à–µ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è

**–ü—Ä–∏–º–µ—Ä—ã –≤–æ–ø—Ä–æ—Å–æ–≤:**
‚Ä¢ "–ö–∞–∫ –∏–∑–º–µ–Ω–∏—Ç—å —è–∑—ã–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è?"
‚Ä¢ "–†–µ–∫–æ–º–µ–Ω–¥—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –¥–ª—è –∏–∑—É—á–µ–Ω–∏—è –∞—Ä–∞–±—Å–∫–æ–≥–æ"
‚Ä¢ "–ö–∞–∫ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –≤—Ä–µ–º—è –º–æ–ª–∏—Ç–≤?"
‚Ä¢ "–ì–¥–µ –Ω–∞–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–ª–∏—Ç–≤?"

**–ö–æ–º–∞–Ω–¥—ã:**
/start - –Ω–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º
/help - –ø–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É
/status - –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞

**–ï—Å–ª–∏ —É –≤–∞—Å –µ—Å—Ç—å —Å–ª–æ–∂–Ω—ã–π –≤–æ–ø—Ä–æ—Å:**
–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ WhatsApp –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏."""
        await update.message.reply_text(help_text, parse_mode='Markdown')
    async def status_command(self, update: Update, context):
        api_status = "‚úÖ –†–∞–±–æ—Ç–∞–µ—Ç" if self.api_client.test_connection() else "‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
        status_text = f"""üìä **–°—Ç–∞—Ç—É—Å –±–æ—Ç–∞**

**API GPT:** {api_status}
**–°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç:** ‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω
**–ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤:** {len(self.conversation_history)} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π

**–ü–æ—Å–ª–µ–¥–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è:**
‚Ä¢ –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å GPT API
‚Ä¢ –£–ª—É—á—à–µ–Ω–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ
‚Ä¢ –ü–æ–¥–¥–µ—Ä–∂–∫–∞ Markdown —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
‚Ä¢ –ò—Å—Ç–æ—Ä–∏—è –¥–∏–∞–ª–æ–≥–æ–≤ –¥–ª—è –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞"""
        await update.message.reply_text(status_text, parse_mode='Markdown')
    async def handle_message(self, update: Update, context):
        user = update.effective_user
        user_message = update.message.text
        if user.id not in self.conversation_history:
            self.conversation_history[user.id] = []
        self.conversation_history[user.id].append({
            'role': 'user',
            'content': user_message
        })
        if len(self.conversation_history[user.id]) > 10:
            self.conversation_history[user.id] = self.conversation_history[user.id][-10:]
        await context.bot.send_chat_action(chat_id=update.effective_chat.id, action="typing")
        try:
            response = self.api_client.generate_response(
                user_message=user_message,
                system_message=self.system_prompt
            )
            self.conversation_history[user.id].append({
                'role': 'assistant',
                'content': response
            })
            keyboard = [
                [
                    InlineKeyboardButton("üëç –ü–æ–ª–µ–∑–Ω–æ", callback_data=f"feedback_good_{user.id}"),
                    InlineKeyboardButton("üëé –ù–µ –ø–æ–ª–µ–∑–Ω–æ", callback_data=f"feedback_bad_{user.id}")
                ]
            ]
            reply_markup = InlineKeyboardMarkup(keyboard)
            await update.message.reply_text(
                response,
                parse_mode='Markdown',
                reply_markup=reply_markup
            )
        except Exception as e:
            logger.error(f"Error generating response: {e}")
            error_message = """–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞. 

–ü–æ–ø—Ä–æ–±—É–π—Ç–µ:
‚Ä¢ –ü–µ—Ä–µ—Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å
‚Ä¢ –û–±—Ä–∞—Ç–∏—Ç—å—Å—è –≤ —Å–ª—É–∂–±—É –ø–æ–¥–¥–µ—Ä–∂–∫–∏ —á–µ—Ä–µ–∑ WhatsApp
‚Ä¢ –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–æ–º–∞–Ω–¥—É /status –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏

–û—à–∏–±–∫–∞: """ + str(e)
            await update.message.reply_text(error_message)
    async def handle_feedback(self, update: Update, context):
        query = update.callback_query
        await query.answer()
        feedback_data = query.data.split('_')
        feedback_type = feedback_data[1]
        user_id = feedback_data[2]
        logger.info(f"User {user_id} gave {feedback_type} feedback")
        if feedback_type == 'good':
            await query.edit_message_text(
                query.message.text + "\n\n‚úÖ –°–ø–∞—Å–∏–±–æ –∑–∞ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–π –æ—Ç–∑—ã–≤!"
            )
        else:
            await query.edit_message_text(
                query.message.text + "\n\n‚ùå –°–ø–∞—Å–∏–±–æ –∑–∞ –æ–±—Ä–∞—Ç–Ω—É—é —Å–≤—è–∑—å! –ú—ã –ø–æ—Å—Ç–∞—Ä–∞–µ–º—Å—è —É–ª—É—á—à–∏—Ç—å –æ—Ç–≤–µ—Ç—ã."
            )
def main():
    bot = GPTTelegramBot()
    application = Application.builder().token(TOKEN).build()
    commands = [
        BotCommand("start", "–ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º"),
        BotCommand("help", "–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é"),
        BotCommand("status", "–ü–æ–∫–∞–∑–∞—Ç—å —Å—Ç–∞—Ç—É—Å –±–æ—Ç–∞"),
        BotCommand("ask", "–ó–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å –æ NamazApp")
    ]
    async def set_commands(app):
        await app.bot.set_my_commands(commands)
    async def start_wrapper(update: Update, context):
        return await bot.start(update, context)
    async def help_wrapper(update: Update, context):
        return await bot.help_command(update, context)
    async def status_wrapper(update: Update, context):
        return await bot.status_command(update, context)
    async def message_wrapper(update: Update, context):
        return await bot.handle_message(update, context)
    async def feedback_wrapper(update: Update, context):
        return await bot.handle_feedback(update, context)
    application.add_handler(CommandHandler("start", start_wrapper))
    application.add_handler(CommandHandler("help", help_wrapper))
    application.add_handler(CommandHandler("status", status_wrapper))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_wrapper))
    application.add_handler(CallbackQueryHandler(feedback_wrapper))
    logger.info("Starting GPT API Telegram Bot...")
    application.post_init = set_commands
    application.run_polling()
if __name__ == '__main__':
    main() 