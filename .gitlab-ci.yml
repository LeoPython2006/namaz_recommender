image: docker:26
services:
  - docker:dind

# GitLab’s Docker-in-Docker needs this
variables:
  DOCKER_TLS_CERTDIR: ""       # disable TLS inside DinD for simplicity

stages: [test, build]

# ─────────────────── tests only ───────────────────
unit-tests:
  stage: test
  script:
    - echo "🔎 run your npm / pytest / go test commands here"
  tags: [docker]

# ─────────────────── optional container build ─────
docker-build:
  stage: build
  rules:
    # skip the whole job unless you deliberately enabled it
    - if: '$BUILD_DOCKER_IMAGE == "true"'
  script:
    # log in to GitLab registry (credentials are injected automatically)
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"
    # build & push
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
  tags: [docker]

# .gitlab-ci.yml
# ───────────── GitLab CI for “chatgpt-recommender” ─────────────
# • Stage 1 – unit-tests (always runs)
# • Stage 2 – docker-build  (runs only if you set BUILD_DOCKER_IMAGE=true)

stages:
  - test
  - build

# Docker-in-Docker needs TLS disabled in the shared runners
variables:
  DOCKER_TLS_CERTDIR: ""

# ───────────────────────── 1.  tests ───────────────────────────
unit-tests:
  stage: test
  image: node:20            # ← or python:3.11, golang:1.22 … whatever you test
  tags: [docker]            # runner tag (remove if you don’t use tags)
  script:
    - echo "🔎 run your npm / pytest / go test here"  # replace with real cmd
    # examples:
    # - npm ci && npm run test
    # - pip install -r requirements-dev.txt && pytest -q

# ───────────────────────── 2.  build (opt-in) ──────────────────
docker-build:
  stage: build
  image: docker:26
  services:
    - docker:dind           # starts the Docker daemon inside the runner
  tags: [docker]

  # Run **only** when you explicitly enable it from the UI or `.env`
  rules:
    - if: '$BUILD_DOCKER_IMAGE == "true"'
      when: on_success
    - when: never           # default (skip)

  before_script:
    # secure login into the built-in GitLab Registry
    - echo "$CI_REGISTRY_PASSWORD" \
        | docker login -u "$CI_REGISTRY_USER" --password-stdin "$CI_REGISTRY"

  script:
    - docker build -t "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA" .
    - docker push "$CI_REGISTRY_IMAGE:$CI_COMMIT_SHORT_SHA"
