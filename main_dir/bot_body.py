import requests

from fastapi import FastAPI, Request
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes, ConversationHandler,
)
import os
from datetime import timezone
import httpx

app = FastAPI()
TOKEN = os.getenv("TELEGRAM_BOT_TOKEN")  # –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Vercel
WEBHOOK_URL = os.getenv("WEBHOOK_URL")   # URL –≤–∞—à–µ–≥–æ Vercel –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è

application = Application.builder().token(TOKEN).build()
# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ –¥–ª—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
main_keyboard = ReplyKeyboardMarkup(
    [["/ask", "/help"]],
    resize_keyboard=True,
    one_time_keyboard=False,
)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

START, GET_NAME = range(2)
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data.clear()
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –ø–µ—Ä–≤–∞—è –≤–µ—Ä—Å–∏—è –±–æ—Ç–∞ –¥–ª—è –Ω–∞—à–µ–≥–æ —Å—É–ø–µ—Ä –ø—Ä–æ–µ–∫—Ç–∞ –ø—Ä–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ç–µ–ª—å–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã",


        reply_markup=main_keyboard,
    )
    api_check_user = f"https://swpdb-production.up.railway.app/users/{update.effective_user.id}/"
    try:
        async with httpx.AsyncClient(timeout=5) as client:
            response = await client.get(api_check_user)

        if response.status_code == 200:
            await update.message.reply_text(
                "–í—ã —É–∂–µ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã!",
                reply_markup=main_keyboard,
            )
            return ConversationHandler.END
    except httpx.RequestError:
        print("–æ—à–∏–±–∫–∞ –Ω–∞ —Å–∞–º–æ–º –¥–µ–ª–µ")
        pass  # –º–æ–∂–Ω–æ –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å, –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    await update.message.reply_text(
        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –≤–∞—à–µ –∏–º—è: ",
        reply_markup=main_keyboard,
    )
    return GET_NAME


async def get_name(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–º–µ–Ω–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"""
    user_name = update.message.text
    context.user_data['name'] = user_name  # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–º—è

    await update.message.reply_text(
        f"–û—Ç–ª–∏—á–Ω–æ, {user_name}! –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º.",
        reply_markup=main_keyboard,
    )
    payload_name_json = {
        "_id" : update.effective_user.id,
        "name" : user_name,
    }
    api_create_user = "https://swpdb-production.up.railway.app/users/"
    response_name = requests.post(api_create_user, json=payload_name_json)
    # if response_name.status_code == 200:
    #     print("yra")
    # else:
    #     print("no")

    return ConversationHandler.END
async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    """–û—Ç–º–µ–Ω–∞ –≤–≤–æ–¥–∞ –∏–º–µ–Ω–∏"""
    await update.message.reply_text(
        "–û—Ç–º–µ–Ω–∞",
        reply_markup=main_keyboard,
    )

    return ConversationHandler.END




async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE) -> None:
    await update.message.reply_text(
        "–î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n"
        "/ask - –∑–∞–¥–∞—Ç—å –≤–æ–ø—Ä–æ—Å\n"
        "/help - –æ—Å–Ω–æ–≤–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–æ–º\n",
    
        reply_markup=main_keyboard,
    )







WAITING_MESSAGE = 1
async def ask(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    context.user_data['last_message'] = None

    ask_keyboard = ReplyKeyboardMarkup(
        [["–û—Ç–º–µ–Ω–∞"]],
        resize_keyboard=True,
        one_time_keyboard=True
    )
    await update.message.reply_text(
        "–ù–∞–ø–∏—à–∏—Ç–µ —Å–≤–æ–π –∑–∞–ø—Ä–æ—Å! –Ø –ø–æ—Å—Ç–∞—Ä–∞—é—Å—å –ø–æ–º–æ—á—å –≤–∞–º!",
        reply_markup=ask_keyboard
    )
    api_create_conv = "https://swpdb-production.up.railway.app/conversations/"
    #api_get_user = f"https://swpdb-production.up.railway.app/users/{update.effective_user.id}/"
    # response_get_name = requests.get(api_create_conv)
    # response_name = response_get_name.json().get("name")
    payload_create_conv = {
        "user_id": update.effective_user.id,
        "messages": [
            {
                "sender" : "user",
                "text" : "STARTING_MESSAGE",
                "time" : "2025-06-22T19:52:30.467Z"
            }
        ]
    }
    #update.message.date.astimezone(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
    response_create_conv = requests.post(api_create_conv, json=payload_create_conv)
    # if response_create_conv.status_code == 200:
    #     print("yra")
    # else:
    #     print("no")
    #     print(response_create_conv.text)
    response_create_conv_json = response_create_conv.json()
    context.user_data['conv_id'] = response_create_conv_json.get("_id")

    return WAITING_MESSAGE
async def ask_handler(update: Update, context: ContextTypes.DEFAULT_TYPE) -> int:
    user_text = update.message.text
    context.user_data['last_message'] = user_text
    await update.message.reply_text(
        f"–≤–∞—à —Ç–µ–∫—Å—Ç: {user_text}",
        reply_markup = main_keyboard
    )

    api_add_message = f"https://swpdb-production.up.railway.app/conversations/{context.user_data['conv_id']}/messages"
    payload_add_message = {
        "sender" : "user",
        "text" : user_text,
        "time" : update.message.date.astimezone(timezone.utc).strftime("%Y-%m-%dT%H:%M:%S.%f")[:-3] + "Z"
    }
    response_add_message = requests.post(api_add_message, json=payload_add_message)
    # if response_add_message.status_code == 200:
    #     print("yra")
    # else:
    #     print("no")
    #     print(response_add_message.json())

    return WAITING_MESSAGE



# –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤
def register_handlers():
    application.add_handler(CommandHandler("help", help_command))
    conv_handler_start = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            GET_NAME: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    get_name
                )
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )
    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("ask", ask)],
        states={
            WAITING_MESSAGE: [
                MessageHandler(
                    filters.TEXT & ~filters.COMMAND,
                    ask_handler
                )
            ],
        },
        fallbacks=[
            CommandHandler("cancel", cancel),
            MessageHandler(filters.Regex("^–û—Ç–º–µ–Ω–∞$"), cancel),
        ],
    )
    application.add_handler(conv_handler)

    application.add_handler(conv_handler_start)

register_handlers()
# Webhook —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è Telegram
@app.post("/webhook")
async def webhook(request: Request):
    try:
        if not application._initialized:
            print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ –∑–∞–ø—É—Å–∫–∞–µ–º application –≤—Ä—É—á–Ω—É—é (cold start)")
            await application.run_async()

        json_data = await request.json()
        print("üì° –ü–æ–ª—É—á–µ–Ω update:", json_data)
        update = Update.de_json(json_data, application.bot)
        await application.process_update(update)
        return {"status": "ok"}

    except Exception as e:
        print(" –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook:", str(e))
        return {"status": "error", "message": str(e)}

# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
@app.get("/")
async def index():
    return {"message": "Bot is running"}

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
@app.on_event("startup")
async def startup():
    await application.bot.set_webhook(url=f"{WEBHOOK_URL}/webhook")

@app.on_event("shutdown")
async def on_shutdown():
    # —É–¥–∞–ª—è–µ–º –≤–µ–±—Ö—É–∫ –∏ —á–∏—Å—Ç–æ –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞
    await application.bot.delete_webhook()
    await application.shutdown()



# # –î–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
# if __name__ == "__main__":
#     import uvicorn
#     register_handlers()
#     uvicorn.run(app, host="127.0.0.1", port=8000)